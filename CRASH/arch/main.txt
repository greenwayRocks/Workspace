[*] Arch-linux Standard Installation:
-------------------------------------
[+] Making sure about Internet Connectivity
    ---------------------------------------
  $ wifi-menu # to connect to wlan0
  $ dhcpcd # manually start dhcp client
  To check/edit mirrorlist:
  $ vim /etc/pacman.d/mirrorlist
  To test mirrors:
  $ pacman -Syyy

[+] Disk structure and Partitioning
    -------------------------------
  $ fdisk /dev/sda

  # Create 3 partitions(EFI{500M}, root'/'{30G}, home{rem})
  # Create filesystems

  $ mkfs.fat -F32 /dev/sda1 # The EFI partition
  $ mkfs.ext4 /dev/sda2 # Root filesystem (/)
  $ mkfs.ext4 /dev/sda3 # Home (/home)

  # Mount filesystems
  $ mount /dev/sda2 /mnt
  $ mount /dev/sda3 /mnt/home (-- mkdir /mnt/home)

  # Save mount points using fstab file
  $ genfstab -U -p /mnt >> /mnt/etc/fstab (-- mkdir /mnt/etc)

[+] Install linux base packages 
  $ pacstrap -i /mnt base

[+] Chroot into OUR ARCH
  $ arch-chroot /mnt

[+] Installing Linux Kernel
  $ pacman -S linux linux-headers linux-lts linux-lts-headers

  ## Additional Packages ##
    # Installing vim to configure text files
    $ pacman -S vim

    # Installing OpenSSH and base-devel
    $ pacman -S openssh base-devel

    # Enabling SSH
    $ systemctl enable sshd

    # Installing packages to facilitate networking
    $ pacman -S networkmanager wpa_supplicant wireless_tools netctl

    # Installing dialog
    $ pacman -S dialog

    # Enabling networkmanager
    $ systemctl enable NetworkManager
    ##
  
[+] Now, we need to generate initial ramdisk for Linux Kernel
  $ mkinitcpio -p linux
  $ mkinitcpio -p linux-lts

  # Configure locale settings
  $ vim /etc/locale.gen
  $ locale-gen

  # Update root password & create a new user
  $ passwd
  $ useradd -m -g users -G wheel greenway

  # Configure our users to use SUDO
  $ visudo

[+] Configuring boot loader GRUB
  $ pacman -S grub efibootmgr dosfstools os-prober mtools
  $ mkdir /boot/EFI
  $ mount /dev/sda1 /boot/EFI
  $ grub-install --target=x86_64-efi \
    --bootloader-id=grub_uefi --recheck
  $ mkdir /boot/grub/locale
  $ cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo \
    /boot/grub/locale/en.mo
  $ grub-mkconfig -o /boot/grub/grub.cfg

[+] Create SWAP file
  $ fallocate -l 2G /swapfile
  $ chmod 600 /swapfile
  $ mkswap /swapfile
  $ cp /etc/fstab /etc/fstab.bak # backing up
  $ echo '/swapfile none swap sw 0 0' | tee -a /etc/fstab

[+] ALL Done! Consider installing these:
  [-] CPU microcode
    $ pacman -S amd-ucode # (AMD CPU)
    $ pacman -S intel-ucode # (Intel CPU)
  
  [-] Xorg (required for desktop envs)
    $ pacman -S xorg-server

  [-] Driver for your video card
    $ pacman -S mesa # (Intel/AMD Graphics)
    $ pacman -S nvidia nvidia-utils nvidia-lts # (NVIDIA GPU)
  
  [-] For VMs,
    $ pacman -S virtualbox-guest-utils xf86-video-vmware


-----------------------------------------------------------------
[*] LVM installation
-----------------------------------------------------------------

$ pvcreate --dataalignment 1m /dev/sda2
Physical volume "/dev/sda2" successfully created.

$ vgcreate volgroup0 /dev/sda2
Volume group "volgroup0" successfully created.

$ lvcreate -L 30GB volgroup0 -n lv_root
Logical volume "lv_root" created.

$ lvcreate -L 250GB volgroup0 -n lv_home
OR
$ lvcreate -l 100%FREE volgroup0 -n lv_home

# Refresh LVM
  $ modprobe dm_mod
  $ vgscan
  $ vgchange -ay

# Format logical volumes
  $ mkfs.ext4 /dev/volgroup0/lv_root
  $ mkfs.ext4 /dev/volgroup0/lv_home

# Mount volumes
  $ mount /dev/volgroup0/lv_root /mnt
  $ mount /dev/volgroup0/lv_home /mnt/home

-------------------------------------------------
[*] LVM with LUKS encryption
-------------------------------------------------

$ cryptsetup luksFormat /dev/sda3
$ cryptsetup open --type luks /dev/sda3 lvm

>> Unlocked, now setup LVM
$ pvcreate --dataalignment 1m /dev/mapper/lvm
.............................................

[*] BSPWM Configuration

  [+] Video drivers, xorg(xorg-server and xorg-xinit only required),
      Display manager(lightdm, lightdm-gtk)
    -> $ sudo pacman -S xf86-video-qxl xorg xorg-xinit bspwm sxhkd dmenu nitrogen